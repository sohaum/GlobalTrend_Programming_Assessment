#include <iostream>
#include <cstdio>
using namespace std;

#define MARKER -1

struct Node {
    int key;
    struct Node *left, *right;
};

struct Node* newNode(int key) {
    struct Node* temp = new Node();
    temp->key = key;
    temp->left = temp->right = NULL;
    return temp;
}

void serialize(Node* root, FILE* fp) {
    if (root == NULL) {
        fprintf(fp, "%d ", MARKER);
        return;
    }
    fprintf(fp, "%d ", root->key);
    serialize(root->left, fp);
    serialize(root->right, fp);
}

void deSerialize(Node*& root, FILE* fp) {
    int val;
    if (!fscanf(fp, "%d ", &val) || val == MARKER)
        return;
    root = newNode(val);
    deSerialize(root->left, fp);
    deSerialize(root->right, fp);
}

void inorder(Node* root) {
    if (root) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

Node* insertNode() {
    int data;
    cout << "Enter data for the node (enter -1 for no node): ";
    cin >> data;
    if (data == -1) {
        return NULL;
    }
    Node* root = newNode(data);
    cout << "Enter left child of " << data << endl;
    root->left = insertNode();
    cout << "Enter right child of " << data << endl;
    root->right = insertNode();
    return root;
}

int main() {
    cout << "Create the binary tree:" << endl;
    Node* root = insertNode();

    FILE* fp = fopen("tree.txt", "w");
    if (fp == NULL) {
        puts("Could not open file");
        return 0;
    }
    serialize(root, fp);
    fclose(fp);

    Node* root1 = NULL;
    fp = fopen("tree.txt", "r");
    deSerialize(root1, fp);
    fclose(fp);

    printf("Inorder Traversal of the tree constructed from file:\n");
    inorder(root1);

    return 0;
}

// After entering the data, the program will serialize the tree into a file named "tree.txt" and 
// then deserialize it back into a tree structure, displaying the inorder traversal of the reconstructed tree.

//       20
//       /  \
//      8    22
//     / \     
//   4   12  
//       / \
//       10  14

